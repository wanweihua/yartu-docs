/*
 * (c) Copyright Ascensio System SIA 2010-2017
 *
 * This program is a free software product. You can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License (AGPL)
 * version 3 as published by the Free Software Foundation. In accordance with
 * Section 7(a) of the GNU AGPL its Section 15 shall be amended to the effect
 * that Ascensio System SIA expressly excludes the warranty of non-infringement
 * of any third-party rights.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE. For
 * details, see the GNU AGPL at: http://www.gnu.org/licenses/agpl-3.0.html
 *
 * You can contact Ascensio System SIA at Lubanas st. 125a-25, Riga, Latvia,
 * EU, LV-1021.
 *
 * The  interactive user interfaces in modified source and object code versions
 * of the Program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU AGPL version 3.
 *
 * Pursuant to Section 7(b) of the License you must retain the original Product
 * logo when distributing the program. Pursuant to Section 7(e) we decline to
 * grant you any rights under trademark law for use of our trademarks.
 *
 * All the Product's GUI elements, including illustrations and icon sets, as
 * well as technical writing content are licensed under the terms of the
 * Creative Commons Attribution-ShareAlike 4.0 International. See the License
 * terms at http://creativecommons.org/licenses/by-sa/4.0/legalcode
 *
 */

var parserTest = (function() {
    /*
     * Generated by PEG.js 0.8.0.
     *
     * http://pegjs.majda.cz/
     */

    function peg$subclass(child, parent) {
        function ctor() { this.constructor = child; }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
    }

    function SyntaxError(message, expected, found, offset, line, column) {
        this.message  = message;
        this.expected = expected;
        this.found    = found;
        this.offset   = offset;
        this.line     = line;
        this.column   = column;

        this.name     = "SyntaxError";
    }

    peg$subclass(SyntaxError, Error);

    function parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},

            peg$FAILED = {},

            peg$startRuleFunctions = { formula: peg$parseformula },
            peg$startRuleFunction  = peg$parseformula,

            peg$c0 = peg$FAILED,
            peg$c1 = null,
            peg$c2 = "=",
            peg$c3 = { type: "literal", value: "=", description: "\"=\"" },
            peg$c4 = [],
            peg$c5 = function(ex) {console.log(arrObjRef); return ex;},
            peg$c6 = function(fC, e1) {var res = [].concat(fC);if(e1 != null && e1 != "EOF" ){res = res.concat(e1);} return res;},
            peg$c7 = "(",
            peg$c8 = { type: "literal", value: "(", description: "\"(\"" },
            peg$c9 = ")",
            peg$c10 = { type: "literal", value: ")", description: "\")\"" },
            peg$c11 = function(e, e1) {var res = ["("].concat(e).concat(")");if(e1 != null && e1 != "EOF" ){res = res.concat(e1);} return res;},
            peg$c12 = function(prOp, e, e1) {var res = [].concat(prOp).concat(e); if(e1 != null && e1 != "EOF" ){res = res.concat(e1);} return res;},
            peg$c13 = function(con, e1) {var res = [].concat(con); if(e1 != null && e1 != "EOF" ){res = res.concat(e1);} return res;},
            peg$c14 = function(cR, e1) {var res = [].concat(cR); if(e1 != null && e1 != "EOF" ){res = res.concat(e1);} return res;},
            peg$c15 = function(inOp, e, e1) {var res = [].concat(inOp).concat(e); if(e1 != null && e1 != "EOF" ){res = res.concat(e1);} return res;},
            peg$c16 = function(pOp, e1) {var res = [].concat(pOp); if(e1 != null && e1 != "EOF" ){res = res.concat(e1);} return res;},
            peg$c17 = void 0,
            peg$c18 = { type: "any", description: "any character" },
            peg$c19 = function() {return "EOF";},
            peg$c20 = function(arg) {return arg;},
            peg$c21 = function(aL) {console.log(aL ? aL.length : 0);return aL;},
            peg$c22 = function(rB) {return ")";},
            peg$c23 = function(fC) {return fC;},
            peg$c24 = function() {return text();},
            peg$c25 = function(delim, arg) {console.log(arg);return arg === null ? "cEmpty" : arg;},
            peg$c26 = function(a1, a2) {return [].concat(a1).concat(a2);},
            peg$c27 = function(exp) {return exp;},
            peg$c28 = ":",
            peg$c29 = { type: "literal", value: ":", description: "\":\"" },
            peg$c30 = function(wSP) {arrObjRef[text()] = text(); return text()+"_ref";/*return cellA1Ref*/},
            peg$c31 = function() {arrObjRef[text()] = text(); return text()+"_name";/*cellRef do somethink*/},
            peg$c32 = "[",
            peg$c33 = { type: "literal", value: "[", description: "\"[\"" },
            peg$c34 = "]",
            peg$c35 = { type: "literal", value: "]", description: "\"]\"" },
            peg$c36 = function() {arrObjRef[text()] = text(); return text()+"_table";},
            peg$c37 = "$",
            peg$c38 = { type: "literal", value: "$", description: "\"$\"" },
            peg$c39 = /^[a-z]/i,
            peg$c40 = { type: "class", value: "[a-z]i", description: "[a-z]i" },
            peg$c41 = /^[^'*\][\\:?\/]/,
            peg$c42 = { type: "class", value: "[^'*\\][\\\\:?\\/]", description: "[^'*\\][\\\\:?\\/]" },
            peg$c43 = "!",
            peg$c44 = { type: "literal", value: "!", description: "\"!\"" },
            peg$c45 = "'",
            peg$c46 = { type: "literal", value: "'", description: "\"'\"" },
            peg$c47 = /^[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u065F\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06EF\u06FA-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u08A0\u08A2-\u08AC\u08E4-\u08E9\u08F0-\u08FE\u0900-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09F0\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A70-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D57\u0D60-\u0D63\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u103F\u1050-\u1062\u1065-\u1068\u106E-\u1086\u108E\u109C\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1713\u1720-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u1938\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1AA7\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4B\u1B80-\u1BA9\u1BAC-\u1BAF\u1BBA-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C35\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u24B6-\u24E9\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA697\uA69F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA827\uA840-\uA873\uA880-\uA8C3\uA8F2-\uA8F7\uA8FB\uA90A-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF\uAA00-\uAA36\uAA40-\uAA4D\uAA60-\uAA76\uAA7A\uAA80-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
            peg$c48 = { type: "class", value: "[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0345\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05B0-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0657\\u0659-\\u065F\\u066E-\\u06D3\\u06D5-\\u06DC\\u06E1-\\u06E8\\u06ED-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710-\\u073F\\u074D-\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0817\\u081A-\\u082C\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u08E4-\\u08E9\\u08F0-\\u08FE\\u0900-\\u093B\\u093D-\\u094C\\u094E-\\u0950\\u0955-\\u0963\\u0971-\\u0977\\u0979-\\u097F\\u0981-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD-\\u09C4\\u09C7\\u09C8\\u09CB\\u09CC\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09F0\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B\\u0A4C\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A70-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB\\u0ACC\\u0AD0\\u0AE0-\\u0AE3\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D-\\u0B44\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD0\\u0BD7\\u0C01-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4C\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C82\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCC\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CF1\\u0CF2\\u0D02\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E46\\u0E4D\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ECD\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F81\\u0F88-\\u0F97\\u0F99-\\u0FBC\\u1000-\\u1036\\u1038\\u103B-\\u103F\\u1050-\\u1062\\u1065-\\u1068\\u106E-\\u1086\\u108E\\u109C\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1713\\u1720-\\u1733\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17B3\\u17B6-\\u17C8\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1920-\\u192B\\u1930-\\u1938\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A61-\\u1A74\\u1AA7\\u1B00-\\u1B33\\u1B35-\\u1B43\\u1B45-\\u1B4B\\u1B80-\\u1BA9\\u1BAC-\\u1BAF\\u1BBA-\\u1BE5\\u1BE7-\\u1BF1\\u1C00-\\u1C35\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u24B6-\\u24E9\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA674-\\uA67B\\uA67F-\\uA697\\uA69F-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA827\\uA840-\\uA873\\uA880-\\uA8C3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA92A\\uA930-\\uA952\\uA960-\\uA97C\\uA980-\\uA9B2\\uA9B4-\\uA9BF\\uA9CF\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAABE\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF5\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABEA\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]", description: "[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0345\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05B0-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0657\\u0659-\\u065F\\u066E-\\u06D3\\u06D5-\\u06DC\\u06E1-\\u06E8\\u06ED-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710-\\u073F\\u074D-\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0817\\u081A-\\u082C\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u08E4-\\u08E9\\u08F0-\\u08FE\\u0900-\\u093B\\u093D-\\u094C\\u094E-\\u0950\\u0955-\\u0963\\u0971-\\u0977\\u0979-\\u097F\\u0981-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD-\\u09C4\\u09C7\\u09C8\\u09CB\\u09CC\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09F0\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B\\u0A4C\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A70-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB\\u0ACC\\u0AD0\\u0AE0-\\u0AE3\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D-\\u0B44\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD0\\u0BD7\\u0C01-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4C\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C82\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCC\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CF1\\u0CF2\\u0D02\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E46\\u0E4D\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ECD\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F81\\u0F88-\\u0F97\\u0F99-\\u0FBC\\u1000-\\u1036\\u1038\\u103B-\\u103F\\u1050-\\u1062\\u1065-\\u1068\\u106E-\\u1086\\u108E\\u109C\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1713\\u1720-\\u1733\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17B3\\u17B6-\\u17C8\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1920-\\u192B\\u1930-\\u1938\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A61-\\u1A74\\u1AA7\\u1B00-\\u1B33\\u1B35-\\u1B43\\u1B45-\\u1B4B\\u1B80-\\u1BA9\\u1BAC-\\u1BAF\\u1BBA-\\u1BE5\\u1BE7-\\u1BF1\\u1C00-\\u1C35\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u24B6-\\u24E9\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA674-\\uA67B\\uA67F-\\uA697\\uA69F-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA827\\uA840-\\uA873\\uA880-\\uA8C3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA92A\\uA930-\\uA952\\uA960-\\uA97C\\uA980-\\uA9B2\\uA9B4-\\uA9BF\\uA9CF\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAABE\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF5\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABEA\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]" },
            peg$c49 = function(cnst) {return cnst+"_const";},
            peg$c50 = "#DIV/0!",
            peg$c51 = { type: "literal", value: "#DIV/0!", description: "\"#DIV/0!\"" },
            peg$c52 = "#N/A",
            peg$c53 = { type: "literal", value: "#N/A", description: "\"#N/A\"" },
            peg$c54 = "#NAME?",
            peg$c55 = { type: "literal", value: "#NAME?", description: "\"#NAME?\"" },
            peg$c56 = "#NULL!",
            peg$c57 = { type: "literal", value: "#NULL!", description: "\"#NULL!\"" },
            peg$c58 = "#NUM!",
            peg$c59 = { type: "literal", value: "#NUM!", description: "\"#NUM!\"" },
            peg$c60 = "#REF!",
            peg$c61 = { type: "literal", value: "#REF!", description: "\"#REF!\"" },
            peg$c62 = "#VALUE!",
            peg$c63 = { type: "literal", value: "#VALUE!", description: "\"#VALUE!\"" },
            peg$c64 = "#GETTING_DATA",
            peg$c65 = { type: "literal", value: "#GETTING_DATA", description: "\"#GETTING_DATA\"" },
            peg$c66 = function() {return text();/*erroconst do somethink*/},
            peg$c67 = "true",
            peg$c68 = { type: "literal", value: "TRUE", description: "\"TRUE\"" },
            peg$c69 = "false",
            peg$c70 = { type: "literal", value: "FALSE", description: "\"FALSE\"" },
            peg$c71 = function() {return text(); /*logconst do somethink*/},
            peg$c72 = function(d1, sc, d2) {return text();/*strconst do somethink*/},
            peg$c73 = "\"",
            peg$c74 = { type: "literal", value: "\"", description: "\"\\\"\"" },
            peg$c75 = /^[\t\n\r !#-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]/,
            peg$c76 = { type: "class", value: "[\\t\\n\\r !#-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]", description: "[\\t\\n\\r !#-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]" },
            peg$c77 = "\"\"",
            peg$c78 = { type: "literal", value: "\"\"", description: "\"\\\"\\\"\"" },
            peg$c79 = ".",
            peg$c80 = { type: "literal", value: ".", description: "\".\"" },
            peg$c81 = function() {return text();/*numconst do somethink*/},
            peg$c82 = "0",
            peg$c83 = { type: "literal", value: "0", description: "\"0\"" },
            peg$c84 = /^[+\-]/,
            peg$c85 = { type: "class", value: "[+\\-]", description: "[+\\-]" },
            peg$c86 = /^[1-9]/,
            peg$c87 = { type: "class", value: "[1-9]", description: "[1-9]" },
            peg$c88 = "e",
            peg$c89 = { type: "literal", value: "e", description: "\"e\"" },
            peg$c90 = /^[0-9]/,
            peg$c91 = { type: "class", value: "[0-9]", description: "[0-9]" },
            peg$c92 = "{",
            peg$c93 = { type: "literal", value: "{", description: "\"{\"" },
            peg$c94 = "}",
            peg$c95 = { type: "literal", value: "}", description: "\"}\"" },
            peg$c96 = ";",
            peg$c97 = { type: "literal", value: ";", description: "\";\"" },
            peg$c98 = function(c) {return c === null ? "cEmpty" : c;},
            peg$c99 = "^",
            peg$c100 = { type: "literal", value: "^", description: "\"^\"" },
            peg$c101 = "*",
            peg$c102 = { type: "literal", value: "*", description: "\"*\"" },
            peg$c103 = "/",
            peg$c104 = { type: "literal", value: "/", description: "\"/\"" },
            peg$c105 = "+",
            peg$c106 = { type: "literal", value: "+", description: "\"+\"" },
            peg$c107 = "-",
            peg$c108 = { type: "literal", value: "-", description: "\"-\"" },
            peg$c109 = "&",
            peg$c110 = { type: "literal", value: "&", description: "\"&\"" },
            peg$c111 = "<>",
            peg$c112 = { type: "literal", value: "<>", description: "\"<>\"" },
            peg$c113 = "<",
            peg$c114 = { type: "literal", value: "<", description: "\"<\"" },
            peg$c115 = "<=",
            peg$c116 = { type: "literal", value: "<=", description: "\"<=\"" },
            peg$c117 = ">",
            peg$c118 = { type: "literal", value: ">", description: "\">\"" },
            peg$c119 = ">=",
            peg$c120 = { type: "literal", value: ">=", description: "\">=\"" },
            peg$c121 = "%",
            peg$c122 = { type: "literal", value: "%", description: "\"%\"" },
            peg$c123 = function(op) {return op;},
            peg$c124 = ",",
            peg$c125 = { type: "literal", value: ",", description: "\",\"" },
            peg$c126 = " ",
            peg$c127 = { type: "literal", value: " ", description: "\" \"" },
            peg$c128 = "_",
            peg$c129 = { type: "literal", value: "_", description: "\"_\"" },
            peg$c130 = "\\",
            peg$c131 = { type: "literal", value: "\\", description: "\"\\\\\"" },
            peg$c132 = /^[A-Za-z_\x80-\x81\x83\x85-\x87\x89-\x8A\x8C-\x91\x93-\x94\x96-\x97\x99-\x9A\x9C-\x9F\xA1-\xA5\xA7-\xA8\xAA\xAD\xAF-\xBA\xBC-\u02B8\u02BB-\u02C1\u02C7\u02C9-\u02CB\u02CD\u02D0-\u02D1\u02D8-\u02DB\u02DD\u02E0-\u02E4\u02EE\u0370-\u0373\u0376-\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0523\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0621-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06E5-\u06E6\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4-\u07F5\u07FA\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0972\u097B-\u097F\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58-\u0C59\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D28\u0D2A-\u0D39\u0D3D\u0D60-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E3A\u0E40-\u0E4E\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDD\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8B\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10D0-\u10FA\u10FC\u1100-\u1159\u115F-\u11A2\u11A8-\u11F9\u1200-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u1676\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19A9\u19C1-\u19C7\u1A00-\u1A16\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2010\u2013-\u2016\u2018\u201C-\u201D\u2020-\u2021\u2025-\u2027\u2030\u2032-\u2033\u2035\u203B\u2071\u2074\u207F\u2081-\u2084\u2090-\u2094\u2102-\u2103\u2105\u2107\u2109-\u2113\u2115-\u2116\u2119-\u211D\u2121-\u2122\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2153-\u2154\u215B-\u215E\u2160-\u2188\u2190-\u2199\u21D2\u21D4\u2200\u2202-\u2203\u2207-\u2208\u220B\u220F\u2211\u2215\u221A\u221D-\u2220\u2223\u2225\u2227-\u222C\u222E\u2234-\u2237\u223C-\u223D\u2248\u224C\u2252\u2260-\u2261\u2264-\u2267\u226A-\u226B\u226E-\u226F\u2282-\u2283\u2286-\u2287\u2295\u2299\u22A5\u22BF\u2312\u2460-\u24B5\u24D0-\u24E9\u2500-\u254B\u2550-\u2574\u2581-\u258F\u2592-\u2595\u25A0-\u25A1\u25A3-\u25A9\u25B2-\u25B3\u25B6-\u25B7\u25BC-\u25BD\u25C0-\u25C1\u25C6-\u25C8\u25CB\u25CE-\u25D1\u25E2-\u25E5\u25EF\u2605-\u2606\u2609\u260E-\u260F\u261C\u261E\u2640\u2642\u2660-\u2661\u2663-\u2665\u2667-\u266A\u266C-\u266D\u266F\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2C6F\u2C71-\u2C7D\u2C80-\u2CE4\u2D00-\u2D25\u2D30-\u2D65\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3000-\u3003\u3005-\u3017\u301D-\u301F\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31B7\u31F0-\u321C\u3220-\u3229\u3231-\u3232\u3239\u3260-\u327B\u327F\u32A3-\u32A8\u3303\u330D\u3314\u3318\u3322-\u3323\u3326-\u3327\u332B\u3336\u333B\u3349-\u334A\u334D\u3351\u3357\u337B-\u337E\u3380-\u3384\u3388-\u33CA\u33CD-\u33D3\u33D5-\u33D6\u33D8\u33DB-\u33DD\u3400-\u4DB5\u4E00-\u9FC3\uA000-\uA48C\uA500-\uA60C\uA610-\uA61F\uA62A-\uA62B\uA640-\uA65F\uA662-\uA66E\uA680-\uA697\uA722-\uA787\uA78B-\uA78C\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA90A-\uA925\uA930-\uA946\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAC00-\uD7A3\uE000-\uF848\uF900-\uFA2D\uFA30-\uFA6A\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE30-\uFE31\uFE33-\uFE44\uFE49-\uFE52\uFE54-\uFE57\uFE59-\uFE66\uFE68-\uFE6B\uFE70-\uFE74\uFE76-\uFEFC\uFF01-\uFF5E\uFF61-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\uFFE0-\uFFE6]/i,
            peg$c133 = { type: "class", value: "[A-Za-z_\\x80-\\x81\\x83\\x85-\\x87\\x89-\\x8A\\x8C-\\x91\\x93-\\x94\\x96-\\x97\\x99-\\x9A\\x9C-\\x9F\\xA1-\\xA5\\xA7-\\xA8\\xAA\\xAD\\xAF-\\xBA\\xBC-\\u02B8\\u02BB-\\u02C1\\u02C7\\u02C9-\\u02CB\\u02CD\\u02D0-\\u02D1\\u02D8-\\u02DB\\u02DD\\u02E0-\\u02E4\\u02EE\\u0370-\\u0373\\u0376-\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0523\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u064A\\u066E-\\u066F\\u0671-\\u06D3\\u06D5\\u06E5-\\u06E6\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4-\\u07F5\\u07FA\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0972\\u097B-\\u097F\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0-\\u0AE1\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58-\\u0C59\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0-\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D3D\\u0D60-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8B\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065-\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10D0-\\u10FA\\u10FC\\u1100-\\u1159\\u115F-\\u11A2\\u11A8-\\u11F9\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u1676\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19A9\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE-\\u1BAF\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2010\\u2013-\\u2016\\u2018\\u201C-\\u201D\\u2020-\\u2021\\u2025-\\u2027\\u2030\\u2032-\\u2033\\u2035\\u203B\\u2071\\u2074\\u207F\\u2081-\\u2084\\u2090-\\u2094\\u2102-\\u2103\\u2105\\u2107\\u2109-\\u2113\\u2115-\\u2116\\u2119-\\u211D\\u2121-\\u2122\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2153-\\u2154\\u215B-\\u215E\\u2160-\\u2188\\u2190-\\u2199\\u21D2\\u21D4\\u2200\\u2202-\\u2203\\u2207-\\u2208\\u220B\\u220F\\u2211\\u2215\\u221A\\u221D-\\u2220\\u2223\\u2225\\u2227-\\u222C\\u222E\\u2234-\\u2237\\u223C-\\u223D\\u2248\\u224C\\u2252\\u2260-\\u2261\\u2264-\\u2267\\u226A-\\u226B\\u226E-\\u226F\\u2282-\\u2283\\u2286-\\u2287\\u2295\\u2299\\u22A5\\u22BF\\u2312\\u2460-\\u24B5\\u24D0-\\u24E9\\u2500-\\u254B\\u2550-\\u2574\\u2581-\\u258F\\u2592-\\u2595\\u25A0-\\u25A1\\u25A3-\\u25A9\\u25B2-\\u25B3\\u25B6-\\u25B7\\u25BC-\\u25BD\\u25C0-\\u25C1\\u25C6-\\u25C8\\u25CB\\u25CE-\\u25D1\\u25E2-\\u25E5\\u25EF\\u2605-\\u2606\\u2609\\u260E-\\u260F\\u261C\\u261E\\u2640\\u2642\\u2660-\\u2661\\u2663-\\u2665\\u2667-\\u266A\\u266C-\\u266D\\u266F\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2C6F\\u2C71-\\u2C7D\\u2C80-\\u2CE4\\u2D00-\\u2D25\\u2D30-\\u2D65\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3000-\\u3003\\u3005-\\u3017\\u301D-\\u301F\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31B7\\u31F0-\\u321C\\u3220-\\u3229\\u3231-\\u3232\\u3239\\u3260-\\u327B\\u327F\\u32A3-\\u32A8\\u3303\\u330D\\u3314\\u3318\\u3322-\\u3323\\u3326-\\u3327\\u332B\\u3336\\u333B\\u3349-\\u334A\\u334D\\u3351\\u3357\\u337B-\\u337E\\u3380-\\u3384\\u3388-\\u33CA\\u33CD-\\u33D3\\u33D5-\\u33D6\\u33D8\\u33DB-\\u33DD\\u3400-\\u4DB5\\u4E00-\\u9FC3\\uA000-\\uA48C\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A-\\uA62B\\uA640-\\uA65F\\uA662-\\uA66E\\uA680-\\uA697\\uA722-\\uA787\\uA78B-\\uA78C\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA90A-\\uA925\\uA930-\\uA946\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAC00-\\uD7A3\\uE000-\\uF848\\uF900-\\uFA2D\\uFA30-\\uFA6A\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE30-\\uFE31\\uFE33-\\uFE44\\uFE49-\\uFE52\\uFE54-\\uFE57\\uFE59-\\uFE66\\uFE68-\\uFE6B\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF01-\\uFF5E\\uFF61-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\uFFE0-\\uFFE6]i", description: "[A-Za-z_\\x80-\\x81\\x83\\x85-\\x87\\x89-\\x8A\\x8C-\\x91\\x93-\\x94\\x96-\\x97\\x99-\\x9A\\x9C-\\x9F\\xA1-\\xA5\\xA7-\\xA8\\xAA\\xAD\\xAF-\\xBA\\xBC-\\u02B8\\u02BB-\\u02C1\\u02C7\\u02C9-\\u02CB\\u02CD\\u02D0-\\u02D1\\u02D8-\\u02DB\\u02DD\\u02E0-\\u02E4\\u02EE\\u0370-\\u0373\\u0376-\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0523\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0621-\\u064A\\u066E-\\u066F\\u0671-\\u06D3\\u06D5\\u06E5-\\u06E6\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4-\\u07F5\\u07FA\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0972\\u097B-\\u097F\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0-\\u0AE1\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58-\\u0C59\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0-\\u0CE1\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D28\\u0D2A-\\u0D39\\u0D3D\\u0D60-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8B\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065-\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10D0-\\u10FA\\u10FC\\u1100-\\u1159\\u115F-\\u11A2\\u11A8-\\u11F9\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u1676\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19A9\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE-\\u1BAF\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2010\\u2013-\\u2016\\u2018\\u201C-\\u201D\\u2020-\\u2021\\u2025-\\u2027\\u2030\\u2032-\\u2033\\u2035\\u203B\\u2071\\u2074\\u207F\\u2081-\\u2084\\u2090-\\u2094\\u2102-\\u2103\\u2105\\u2107\\u2109-\\u2113\\u2115-\\u2116\\u2119-\\u211D\\u2121-\\u2122\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2153-\\u2154\\u215B-\\u215E\\u2160-\\u2188\\u2190-\\u2199\\u21D2\\u21D4\\u2200\\u2202-\\u2203\\u2207-\\u2208\\u220B\\u220F\\u2211\\u2215\\u221A\\u221D-\\u2220\\u2223\\u2225\\u2227-\\u222C\\u222E\\u2234-\\u2237\\u223C-\\u223D\\u2248\\u224C\\u2252\\u2260-\\u2261\\u2264-\\u2267\\u226A-\\u226B\\u226E-\\u226F\\u2282-\\u2283\\u2286-\\u2287\\u2295\\u2299\\u22A5\\u22BF\\u2312\\u2460-\\u24B5\\u24D0-\\u24E9\\u2500-\\u254B\\u2550-\\u2574\\u2581-\\u258F\\u2592-\\u2595\\u25A0-\\u25A1\\u25A3-\\u25A9\\u25B2-\\u25B3\\u25B6-\\u25B7\\u25BC-\\u25BD\\u25C0-\\u25C1\\u25C6-\\u25C8\\u25CB\\u25CE-\\u25D1\\u25E2-\\u25E5\\u25EF\\u2605-\\u2606\\u2609\\u260E-\\u260F\\u261C\\u261E\\u2640\\u2642\\u2660-\\u2661\\u2663-\\u2665\\u2667-\\u266A\\u266C-\\u266D\\u266F\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2C6F\\u2C71-\\u2C7D\\u2C80-\\u2CE4\\u2D00-\\u2D25\\u2D30-\\u2D65\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3000-\\u3003\\u3005-\\u3017\\u301D-\\u301F\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31B7\\u31F0-\\u321C\\u3220-\\u3229\\u3231-\\u3232\\u3239\\u3260-\\u327B\\u327F\\u32A3-\\u32A8\\u3303\\u330D\\u3314\\u3318\\u3322-\\u3323\\u3326-\\u3327\\u332B\\u3336\\u333B\\u3349-\\u334A\\u334D\\u3351\\u3357\\u337B-\\u337E\\u3380-\\u3384\\u3388-\\u33CA\\u33CD-\\u33D3\\u33D5-\\u33D6\\u33D8\\u33DB-\\u33DD\\u3400-\\u4DB5\\u4E00-\\u9FC3\\uA000-\\uA48C\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A-\\uA62B\\uA640-\\uA65F\\uA662-\\uA66E\\uA680-\\uA697\\uA722-\\uA787\\uA78B-\\uA78C\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA90A-\\uA925\\uA930-\\uA946\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAC00-\\uD7A3\\uE000-\\uF848\\uF900-\\uFA2D\\uFA30-\\uFA6A\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE30-\\uFE31\\uFE33-\\uFE44\\uFE49-\\uFE52\\uFE54-\\uFE57\\uFE59-\\uFE66\\uFE68-\\uFE6B\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF01-\\uFF5E\\uFF61-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\uFFE0-\\uFFE6]i" },

            peg$currPos          = 0,
            peg$reportedPos      = 0,
            peg$cachedPos        = 0,
            peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
            peg$maxFailPos       = 0,
            peg$maxFailExpected  = [],
            peg$silentFails      = 0,

            peg$cache = {},
            peg$result;

        if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
                throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
            }

            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }

        function text() {
            return input.substring(peg$reportedPos, peg$currPos);
        }

        function offset() {
            return peg$reportedPos;
        }

        function line() {
            return peg$computePosDetails(peg$reportedPos).line;
        }

        function column() {
            return peg$computePosDetails(peg$reportedPos).column;
        }

        function expected(description) {
            throw peg$buildException(
                null,
                [{ type: "other", description: description }],
                peg$reportedPos
            );
        }

        function error(message) {
            throw peg$buildException(message, null, peg$reportedPos);
        }

        function peg$computePosDetails(pos) {
            function advance(details, startPos, endPos) {
                var p, ch;

                for (p = startPos; p < endPos; p++) {
                    ch = input.charAt(p);
                    if (ch === "\n") {
                        if (!details.seenCR) { details.line++; }
                        details.column = 1;
                        details.seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        details.line++;
                        details.column = 1;
                        details.seenCR = true;
                    } else {
                        details.column++;
                        details.seenCR = false;
                    }
                }
            }

            if (peg$cachedPos !== pos) {
                if (peg$cachedPos > pos) {
                    peg$cachedPos = 0;
                    peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
                }
                advance(peg$cachedPosDetails, peg$cachedPos, pos);
                peg$cachedPos = pos;
            }

            return peg$cachedPosDetails;
        }

        function peg$fail(expected) {
            if (peg$currPos < peg$maxFailPos) { return; }

            if (peg$currPos > peg$maxFailPos) {
                peg$maxFailPos = peg$currPos;
                peg$maxFailExpected = [];
            }

            peg$maxFailExpected.push(expected);
        }

        function peg$buildException(message, expected, pos) {
            function cleanupExpected(expected) {
                var i = 1;

                expected.sort(function(a, b) {
                    if (a.description < b.description) {
                        return -1;
                    } else if (a.description > b.description) {
                        return 1;
                    } else {
                        return 0;
                    }
                });

                while (i < expected.length) {
                    if (expected[i - 1] === expected[i]) {
                        expected.splice(i, 1);
                    } else {
                        i++;
                    }
                }
            }

            function buildMessage(expected, found) {
                function stringEscape(s) {
                    function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

                    return s
                        .replace(/\\/g,   '\\\\')
                        .replace(/"/g,    '\\"')
                        .replace(/\x08/g, '\\b')
                        .replace(/\t/g,   '\\t')
                        .replace(/\n/g,   '\\n')
                        .replace(/\f/g,   '\\f')
                        .replace(/\r/g,   '\\r')
                        .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
                        .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
                        .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
                        .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
                }

                var expectedDescs = new Array(expected.length),
                    expectedDesc, foundDesc, i;

                for (i = 0; i < expected.length; i++) {
                    expectedDescs[i] = expected[i].description;
                }

                expectedDesc = expected.length > 1
                    ? expectedDescs.slice(0, -1).join(", ")
                    + " or "
                    + expectedDescs[expected.length - 1]
                    : expectedDescs[0];

                foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

                return "Expected " + expectedDesc + " but " + foundDesc + " found.";
            }

            var posDetails = peg$computePosDetails(pos),
                found      = pos < input.length ? input.charAt(pos) : null;

            if (expected !== null) {
                cleanupExpected(expected);
            }

            return new SyntaxError(
                message !== null ? message : buildMessage(expected, found),
                expected,
                found,
                pos,
                posDetails.line,
                posDetails.column
            );
        }

        function peg$parseformula() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 60 + 0,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 61) {
                s1 = peg$c2;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
            }
            if (s1 === peg$FAILED) {
                s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsespace();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parsespace();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseexpression();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c5(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseexpression() {
            var s0, s1, s2, s3, s4;

            var key    = peg$currPos * 60 + 1,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsefunctionCall();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseE1();
                if (s2 === peg$FAILED) {
                    s2 = peg$parseEOF();
                    if (s2 === peg$FAILED) {
                        s2 = peg$c1;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c6(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c7;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseexpression();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                            s3 = peg$c9;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c10); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseE1();
                            if (s4 === peg$FAILED) {
                                s4 = peg$parseEOF();
                                if (s4 === peg$FAILED) {
                                    s4 = peg$c1;
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c11(s2, s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseprefOper();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseexpression();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseE1();
                            if (s3 === peg$FAILED) {
                                s3 = peg$parseEOF();
                                if (s3 === peg$FAILED) {
                                    s3 = peg$c1;
                                }
                            }
                            if (s3 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c12(s1, s2, s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseconst();
                        if (s1 !== peg$FAILED) {
                            s2 = peg$parseE1();
                            if (s2 === peg$FAILED) {
                                s2 = peg$parseEOF();
                                if (s2 === peg$FAILED) {
                                    s2 = peg$c1;
                                }
                            }
                            if (s2 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c13(s1, s2);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parsecellRef();
                            if (s1 !== peg$FAILED) {
                                s2 = peg$parseE1();
                                if (s2 === peg$FAILED) {
                                    s2 = peg$parseEOF();
                                    if (s2 === peg$FAILED) {
                                        s2 = peg$c1;
                                    }
                                }
                                if (s2 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c14(s1, s2);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        }
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseE1() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 60 + 2,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseinfOper();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseexpression();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseE1();
                    if (s3 === peg$FAILED) {
                        s3 = peg$parseEOF();
                        if (s3 === peg$FAILED) {
                            s3 = peg$c1;
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c15(s1, s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsepostOper();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseE1();
                    if (s2 === peg$FAILED) {
                        s2 = peg$parseEOF();
                        if (s2 === peg$FAILED) {
                            s2 = peg$c1;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c16(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseEOF() {
            var s0, s1, s2;

            var key    = peg$currPos * 60 + 3,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            if (input.length > peg$currPos) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            peg$silentFails--;
            if (s2 === peg$FAILED) {
                s1 = peg$c17;
            } else {
                peg$currPos = s1;
                s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c19();
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsefunctionCall() {
            var s0, s1, s2, s3, s4, s5, s6, s7;

            var key    = peg$currPos * 60 + 4,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsespace();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsespace();
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parsefunctionName();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s4 = peg$c7;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c8); }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$currPos;
                        s6 = peg$currPos;
                        s7 = peg$parseargumentList();
                        if (s7 === peg$FAILED) {
                            s7 = peg$c1;
                        }
                        if (s7 !== peg$FAILED) {
                            peg$reportedPos = s6;
                            s7 = peg$c20(s7);
                        }
                        s6 = s7;
                        if (s6 !== peg$FAILED) {
                            peg$reportedPos = s5;
                            s6 = peg$c21(s6);
                        }
                        s5 = s6;
                        if (s5 !== peg$FAILED) {
                            s6 = peg$currPos;
                            if (input.charCodeAt(peg$currPos) === 41) {
                                s7 = peg$c9;
                                peg$currPos++;
                            } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c10); }
                            }
                            if (s7 === peg$FAILED) {
                                s7 = peg$c1;
                            }
                            if (s7 !== peg$FAILED) {
                                peg$reportedPos = s6;
                                s7 = peg$c22(s7);
                            }
                            s6 = s7;
                            if (s6 !== peg$FAILED) {
                                s3 = [s3, s4, s5, s6];
                                s2 = s3;
                            } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c23(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsefunctionName() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 60 + 5,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseletter();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseudn();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseudn();
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c24();
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseudn() {
            var s0;

            var key    = peg$currPos * 60 + 6,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$parseletter();
            if (s0 === peg$FAILED) {
                s0 = peg$parsedecDig();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsefullStop();
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseargumentList() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 60 + 7,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseargument();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsecomma();
                if (s4 === peg$FAILED) {
                    s4 = peg$parsesemicolon();
                }
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseargument();
                    if (s5 === peg$FAILED) {
                        s5 = peg$c1;
                    }
                    if (s5 !== peg$FAILED) {
                        peg$reportedPos = s3;
                        s4 = peg$c25(s4, s5);
                        s3 = s4;
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsecomma();
                    if (s4 === peg$FAILED) {
                        s4 = peg$parsesemicolon();
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseargument();
                        if (s5 === peg$FAILED) {
                            s5 = peg$c1;
                        }
                        if (s5 !== peg$FAILED) {
                            peg$reportedPos = s3;
                            s4 = peg$c25(s4, s5);
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c26(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseargument() {
            var s0, s1, s2, s3, s4;

            var key    = peg$currPos * 60 + 8,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsespace();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsespace();
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseexpression();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsespace();
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parsespace();
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c27(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsecellRef() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 60 + 9,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$parsetable();
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseworkSheetPrefix();
                if (s1 === peg$FAILED) {
                    s1 = peg$c1;
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parseA1ref();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                            s4 = peg$c28;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c29); }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseA1ref();
                            if (s5 !== peg$FAILED) {
                                s3 = [s3, s4, s5];
                                s2 = s3;
                            } else {
                                peg$currPos = s2;
                                s2 = peg$c0;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$c0;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                    }
                    if (s2 === peg$FAILED) {
                        s2 = peg$parseA1ref();
                    }
                    if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c30(s1);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsename();
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c31();
                    }
                    s0 = s1;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsetable() {
            var s0, s1, s2, s3, s4;

            var key    = peg$currPos * 60 + 10,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsename();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 91) {
                    s2 = peg$c32;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c33); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsename();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                            s4 = peg$c34;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c35); }
                        }
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c36();
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseA1ref() {
            var s0, s1, s2, s3, s4;

            var key    = peg$currPos * 60 + 11,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parseA1c();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                    s3 = peg$c28;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c29); }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseA1c();
                    if (s4 !== peg$FAILED) {
                        s2 = [s2, s3, s4];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$c0;
            }
            if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = peg$parseA1r();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                        s3 = peg$c28;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c29); }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseA1r();
                        if (s4 !== peg$FAILED) {
                            s2 = [s2, s3, s4];
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$c0;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                }
                if (s1 === peg$FAILED) {
                    s1 = peg$currPos;
                    s2 = peg$parseA1c();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseA1r();
                        if (s3 !== peg$FAILED) {
                            s2 = [s2, s3];
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$c0;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                    }
                }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c24();
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseA1c() {
            var s0, s1, s2;

            var key    = peg$currPos * 60 + 12,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$parseA1rc();
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 36) {
                    s1 = peg$c37;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c38); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseA1rc();
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseA1rc() {
            var s0, s1, s2;

            var key    = peg$currPos * 60 + 13,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            if (peg$c39.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c40); }
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c39.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c40); }
                    }
                }
            } else {
                s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c24();
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseA1r() {
            var s0, s1, s2;

            var key    = peg$currPos * 60 + 14,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$parsedigSeq();
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 36) {
                    s1 = peg$c37;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c38); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsedigSeq();
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseworkSheetPrefix() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 60 + 15,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseworkSheetPrefixSpecial();
            if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = peg$parsesheetName();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsesheetNameCellRefDelim();
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                }
                if (s1 === peg$FAILED) {
                    s1 = peg$currPos;
                    s2 = peg$parsesheetName();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                            s3 = peg$c28;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c29); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsesheetName();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsesheetNameCellRefDelim();
                                if (s5 !== peg$FAILED) {
                                    s2 = [s2, s3, s4, s5];
                                    s1 = s2;
                                } else {
                                    peg$currPos = s1;
                                    s1 = peg$c0;
                                }
                            } else {
                                peg$currPos = s1;
                                s1 = peg$c0;
                            }
                        } else {
                            peg$currPos = s1;
                            s1 = peg$c0;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                    }
                }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c24();
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseworkSheetPrefixSpecial() {
            var s0, s1, s2, s3, s4, s5, s6;

            var key    = peg$currPos * 60 + 16,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseapostrophe();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsesheetNameSpecial();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseapostrophe();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsesheetNameCellRefDelim();
                        if (s4 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseapostrophe();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsesheetNameSpecial();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                            s3 = peg$c28;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c29); }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsesheetNameSpecial();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseapostrophe();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsesheetNameCellRefDelim();
                                    if (s6 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5, s6];
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsesheetNameSpecial() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 60 + 17,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsesheetNameStartCharacterSpecial();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsesheetNameCharactersSpecial();
                if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsesheetNameStartCharacterSpecial();
                    if (s3 === peg$FAILED) {
                        s3 = peg$c1;
                    }
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsesheetNameStartCharacterSpecial() {
            var s0;

            var key    = peg$currPos * 60 + 18,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (peg$c41.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c42); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsesheetNameCharactersSpecial() {
            var s0, s1;

            var key    = peg$currPos * 60 + 19,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = [];
            s1 = peg$parsesheetNameCharacterSpecial();
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                s1 = peg$parsesheetNameCharacterSpecial();
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsesheetNameCharacterSpecial() {
            var s0, s1, s2;

            var key    = peg$currPos * 60 + 20,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseapostrophe();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseapostrophe();
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                if (peg$c41.test(input.charAt(peg$currPos))) {
                    s0 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c42); }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsesheetNameCellRefDelim() {
            var s0;

            var key    = peg$currPos * 60 + 21,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.charCodeAt(peg$currPos) === 33) {
                s0 = peg$c43;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c44); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseapostrophe() {
            var s0;

            var key    = peg$currPos * 60 + 22,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.charCodeAt(peg$currPos) === 39) {
                s0 = peg$c45;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsesheetName() {
            var s0, s1, s2;

            var key    = peg$currPos * 60 + 23,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsesheetNameCharacter();
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parsesheetNameCharacter();
                }
            } else {
                s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c24();
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsesheetNameCharacter() {
            var s0;

            var key    = peg$currPos * 60 + 24,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (peg$c47.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c48); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsename() {
            var s0, s1, s2;

            var key    = peg$currPos * 60 + 25,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsenameStartChar();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsenameChars();
                if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c24();
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsenameStartChar() {
            var s0;

            var key    = peg$currPos * 60 + 26,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$parseletter();
            if (s0 === peg$FAILED) {
                s0 = peg$parseunderscore();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsebackslash();
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsenameChars() {
            var s0, s1, s2;

            var key    = peg$currPos * 60 + 27,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsenameChar();
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parsenameChar();
                }
            } else {
                s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c24();
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsenameChar() {
            var s0;

            var key    = peg$currPos * 60 + 28,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$parseletter();
            if (s0 === peg$FAILED) {
                s0 = peg$parsedecDig();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseunderscore();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsefullStop();
                    }
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseconst() {
            var s0, s1, s2, s3, s4;

            var key    = peg$currPos * 60 + 29,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsespace();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsespace();
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseerrConst();
                if (s2 === peg$FAILED) {
                    s2 = peg$parselogConst();
                    if (s2 === peg$FAILED) {
                        s2 = peg$parsestrConst();
                        if (s2 === peg$FAILED) {
                            s2 = peg$parsenumConst();
                            if (s2 === peg$FAILED) {
                                s2 = peg$parsearrConst();
                            }
                        }
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsespace();
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parsespace();
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c49(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseerrConst() {
            var s0, s1;

            var key    = peg$currPos * 60 + 30,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c50) {
                s1 = peg$c50;
                peg$currPos += 7;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c51); }
            }
            if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c52) {
                    s1 = peg$c52;
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c53); }
                }
                if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c54) {
                        s1 = peg$c54;
                        peg$currPos += 6;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c55); }
                    }
                    if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c56) {
                            s1 = peg$c56;
                            peg$currPos += 6;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c57); }
                        }
                        if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c58) {
                                s1 = peg$c58;
                                peg$currPos += 5;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c59); }
                            }
                            if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 5) === peg$c60) {
                                    s1 = peg$c60;
                                    peg$currPos += 5;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c61); }
                                }
                                if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 7) === peg$c62) {
                                        s1 = peg$c62;
                                        peg$currPos += 7;
                                    } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c63); }
                                    }
                                    if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 13) === peg$c64) {
                                            s1 = peg$c64;
                                            peg$currPos += 13;
                                        } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c65); }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c66();
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parselogConst() {
            var s0, s1;

            var key    = peg$currPos * 60 + 31,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c67) {
                s0 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c68); }
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c69) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c70); }
                }
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c71();
                }
                s0 = s1;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsestrConst() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 60 + 32,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parsedblQuote();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsestrChars();
                if (s2 === peg$FAILED) {
                    s2 = peg$c1;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsedblQuote();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c72(s1, s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsedblQuote() {
            var s0;

            var key    = peg$currPos * 60 + 33,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.charCodeAt(peg$currPos) === 34) {
                s0 = peg$c73;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c74); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsestrChars() {
            var s0, s1, s2;

            var key    = peg$currPos * 60 + 34,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            if (peg$c75.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c76); }
            }
            if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c77) {
                    s2 = peg$c77;
                    peg$currPos += 2;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c78); }
                }
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c75.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c76); }
                    }
                    if (s2 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c77) {
                            s2 = peg$c77;
                            peg$currPos += 2;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c78); }
                        }
                    }
                }
            } else {
                s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c24();
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsenumConst() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 60 + 35,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parseDecimalIntegerLiteral();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                    s3 = peg$c79;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c80); }
                }
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parsedecDig();
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parsedecDig();
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseExponentPart();
                        if (s5 === peg$FAILED) {
                            s5 = peg$c1;
                        }
                        if (s5 !== peg$FAILED) {
                            s2 = [s2, s3, s4, s5];
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$c0;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$c0;
            }
            if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 46) {
                    s2 = peg$c79;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c80); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsedecDig();
                    if (s4 !== peg$FAILED) {
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$parsedecDig();
                        }
                    } else {
                        s3 = peg$c0;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseExponentPart();
                        if (s4 === peg$FAILED) {
                            s4 = peg$c1;
                        }
                        if (s4 !== peg$FAILED) {
                            s2 = [s2, s3, s4];
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$c0;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                }
                if (s1 === peg$FAILED) {
                    s1 = peg$currPos;
                    s2 = peg$parseDecimalIntegerLiteral();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseExponentPart();
                        if (s3 === peg$FAILED) {
                            s3 = peg$c1;
                        }
                        if (s3 !== peg$FAILED) {
                            s2 = [s2, s3];
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$c0;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c0;
                    }
                }
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c81();
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseDecimalIntegerLiteral() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 60 + 36,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.charCodeAt(peg$currPos) === 48) {
                s0 = peg$c82;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c83); }
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseNonZeroDigit();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parsedecDig();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsedecDig();
                    }
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseNonZeroDigit() {
            var s0, s1, s2;

            var key    = peg$currPos * 60 + 37,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (peg$c84.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c85); }
            }
            if (s1 === peg$FAILED) {
                s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
                if (peg$c86.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c87); }
                }
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseExponentPart() {
            var s0, s1, s2;

            var key    = peg$currPos * 60 + 38,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.substr(peg$currPos, 1).toLowerCase() === peg$c88) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c89); }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseSignedInteger();
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseSignedInteger() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 60 + 39,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (peg$c84.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c85); }
            }
            if (s1 === peg$FAILED) {
                s1 = peg$c1;
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsedecDig();
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsedecDig();
                    }
                } else {
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsedecDig() {
            var s0;

            var key    = peg$currPos * 60 + 40,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            function _decDig(c){
                return 48 <= c && c <= 57;
            }

//            if (peg$c90.test(input.charAt(peg$currPos))) {
            if ( _decDig( input.charAt(peg$currPos).charCodeAt(0) ) ) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c91); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsedigSeq() {
            var s0, s1, s2;

            var key    = peg$currPos * 60 + 41,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsedecDig();
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parsedecDig();
                }
            } else {
                s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c24();
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsefullStop() {
            var s0;

            var key    = peg$currPos * 60 + 42,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.charCodeAt(peg$currPos) === 46) {
                s0 = peg$c79;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c80); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsews() {
            var s0;

            var key    = peg$currPos * 60 + 43,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$parsespace();
            if (s0 === peg$FAILED) {
                s0 = peg$c1;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsearrConst() {
            var s0, s1, s2, s3;

            var key    = peg$currPos * 60 + 44,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c92;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c93); }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseconstListRows();
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parseconstListRows();
                    }
                } else {
                    s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                        s3 = peg$c94;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c95); }
                    }
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseconstListRows() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 60 + 45,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseconstListRow();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsesemicolon();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseconstListRow();
                    if (s5 === peg$FAILED) {
                        s5 = peg$c1;
                    }
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsesemicolon();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseconstListRow();
                        if (s5 === peg$FAILED) {
                            s5 = peg$c1;
                        }
                        if (s5 !== peg$FAILED) {
                            s4 = [s4, s5];
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsesemicolon() {
            var s0;

            var key    = peg$currPos * 60 + 46,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.charCodeAt(peg$currPos) === 59) {
                s0 = peg$c96;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c97); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseconstListRow() {
            var s0, s1, s2, s3, s4, s5;

            var key    = peg$currPos * 60 + 47,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = peg$parseconst();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$parsecomma();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseconst();
                    if (s5 === peg$FAILED) {
                        s5 = peg$c1;
                    }
                    if (s5 !== peg$FAILED) {
                        peg$reportedPos = s3;
                        s4 = peg$c98(s5);
                        s3 = s4;
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$parsecomma();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseconst();
                        if (s5 === peg$FAILED) {
                            s5 = peg$c1;
                        }
                        if (s5 !== peg$FAILED) {
                            peg$reportedPos = s3;
                            s4 = peg$c98(s5);
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c0;
                    }
                }
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseoperator() {
            var s0, s1, s2, s3, s4;

            var key    = peg$currPos * 60 + 48,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsespace();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsespace();
            }
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                    s2 = peg$c28;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c29); }
                }
                if (s2 === peg$FAILED) {
                    s2 = peg$parsecomma();
                    if (s2 === peg$FAILED) {
                        s2 = peg$parsespace();
                        if (s2 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 94) {
                                s2 = peg$c99;
                                peg$currPos++;
                            } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c100); }
                            }
                            if (s2 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 42) {
                                    s2 = peg$c101;
                                    peg$currPos++;
                                } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c102); }
                                }
                                if (s2 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 47) {
                                        s2 = peg$c103;
                                        peg$currPos++;
                                    } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c104); }
                                    }
                                    if (s2 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 43) {
                                            s2 = peg$c105;
                                            peg$currPos++;
                                        } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c106); }
                                        }
                                        if (s2 === peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 45) {
                                                s2 = peg$c107;
                                                peg$currPos++;
                                            } else {
                                                s2 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c108); }
                                            }
                                            if (s2 === peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 38) {
                                                    s2 = peg$c109;
                                                    peg$currPos++;
                                                } else {
                                                    s2 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c110); }
                                                }
                                                if (s2 === peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 61) {
                                                        s2 = peg$c2;
                                                        peg$currPos++;
                                                    } else {
                                                        s2 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                                    }
                                                    if (s2 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 2) === peg$c111) {
                                                            s2 = peg$c111;
                                                            peg$currPos += 2;
                                                        } else {
                                                            s2 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c112); }
                                                        }
                                                        if (s2 === peg$FAILED) {
                                                            if (input.charCodeAt(peg$currPos) === 60) {
                                                                s2 = peg$c113;
                                                                peg$currPos++;
                                                            } else {
                                                                s2 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c114); }
                                                            }
                                                            if (s2 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 2) === peg$c115) {
                                                                    s2 = peg$c115;
                                                                    peg$currPos += 2;
                                                                } else {
                                                                    s2 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c116); }
                                                                }
                                                                if (s2 === peg$FAILED) {
                                                                    if (input.charCodeAt(peg$currPos) === 62) {
                                                                        s2 = peg$c117;
                                                                        peg$currPos++;
                                                                    } else {
                                                                        s2 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c118); }
                                                                    }
                                                                    if (s2 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 2) === peg$c119) {
                                                                            s2 = peg$c119;
                                                                            peg$currPos += 2;
                                                                        } else {
                                                                            s2 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c120); }
                                                                        }
                                                                        if (s2 === peg$FAILED) {
                                                                            if (input.charCodeAt(peg$currPos) === 37) {
                                                                                s2 = peg$c121;
                                                                                peg$currPos++;
                                                                            } else {
                                                                                s2 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c122); }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsespace();
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parsespace();
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c123(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseinfOper() {
            var s0, s1, s2, s3, s4;

            var key    = peg$currPos * 60 + 49,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsespace();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsespace();
            }
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                    s2 = peg$c28;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c29); }
                }
                if (s2 === peg$FAILED) {
                    s2 = peg$parsecomma();
                    if (s2 === peg$FAILED) {
                        s2 = peg$parsespace();
                        if (s2 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 94) {
                                s2 = peg$c99;
                                peg$currPos++;
                            } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c100); }
                            }
                            if (s2 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 42) {
                                    s2 = peg$c101;
                                    peg$currPos++;
                                } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c102); }
                                }
                                if (s2 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 47) {
                                        s2 = peg$c103;
                                        peg$currPos++;
                                    } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c104); }
                                    }
                                    if (s2 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 43) {
                                            s2 = peg$c105;
                                            peg$currPos++;
                                        } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c106); }
                                        }
                                        if (s2 === peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 45) {
                                                s2 = peg$c107;
                                                peg$currPos++;
                                            } else {
                                                s2 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c108); }
                                            }
                                            if (s2 === peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 38) {
                                                    s2 = peg$c109;
                                                    peg$currPos++;
                                                } else {
                                                    s2 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c110); }
                                                }
                                                if (s2 === peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 61) {
                                                        s2 = peg$c2;
                                                        peg$currPos++;
                                                    } else {
                                                        s2 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c3); }
                                                    }
                                                    if (s2 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 2) === peg$c111) {
                                                            s2 = peg$c111;
                                                            peg$currPos += 2;
                                                        } else {
                                                            s2 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c112); }
                                                        }
                                                        if (s2 === peg$FAILED) {
                                                            if (input.charCodeAt(peg$currPos) === 60) {
                                                                s2 = peg$c113;
                                                                peg$currPos++;
                                                            } else {
                                                                s2 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c114); }
                                                            }
                                                            if (s2 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 2) === peg$c115) {
                                                                    s2 = peg$c115;
                                                                    peg$currPos += 2;
                                                                } else {
                                                                    s2 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c116); }
                                                                }
                                                                if (s2 === peg$FAILED) {
                                                                    if (input.charCodeAt(peg$currPos) === 62) {
                                                                        s2 = peg$c117;
                                                                        peg$currPos++;
                                                                    } else {
                                                                        s2 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c118); }
                                                                    }
                                                                    if (s2 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 2) === peg$c119) {
                                                                            s2 = peg$c119;
                                                                            peg$currPos += 2;
                                                                        } else {
                                                                            s2 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c120); }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsespace();
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parsespace();
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c123(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsepostOper() {
            var s0, s1, s2, s3, s4;

            var key    = peg$currPos * 60 + 50,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsespace();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsespace();
            }
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 37) {
                    s2 = peg$c121;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c122); }
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsespace();
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parsespace();
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c123(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseprefOper() {
            var s0, s1, s2, s3, s4;

            var key    = peg$currPos * 60 + 51,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsespace();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsespace();
            }
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                    s2 = peg$c107;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c108); }
                }
                if (s2 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 43) {
                        s2 = peg$c105;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c106); }
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsespace();
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parsespace();
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c123(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsecomma() {
            var s0;

            var key    = peg$currPos * 60 + 52,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.charCodeAt(peg$currPos) === 44) {
                s0 = peg$c124;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c125); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsespace() {
            var s0;

            var key    = peg$currPos * 60 + 53,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.charCodeAt(peg$currPos) === 32) {
                s0 = peg$c126;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c127); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseunderscore() {
            var s0;

            var key    = peg$currPos * 60 + 54,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.charCodeAt(peg$currPos) === 95) {
                s0 = peg$c128;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c129); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parsebackslash() {
            var s0;

            var key    = peg$currPos * 60 + 55,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.charCodeAt(peg$currPos) === 92) {
                s0 = peg$c130;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c131); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseleftParentheses() {
            var s0;

            var key    = peg$currPos * 60 + 56,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.charCodeAt(peg$currPos) === 40) {
                s0 = peg$c7;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parserigthParentheses() {
            var s0;

            var key    = peg$currPos * 60 + 57,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (input.charCodeAt(peg$currPos) === 41) {
                s0 = peg$c9;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseletters() {
            var s0, s1, s2;

            var key    = peg$currPos * 60 + 58,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseletter();
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseletter();
                }
            } else {
                s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c24();
            }
            s0 = s1;

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }

        function peg$parseletter() {
            var s0;

            var key    = peg$currPos * 60 + 59,
                cached = peg$cache[key];

            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }

            if (peg$c132.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c133); }
            }

            peg$cache[key] = { nextPos: peg$currPos, result: s0 };

            return s0;
        }


        var arrObjRef = {};


        peg$result = peg$startRuleFunction();

        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
        } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                peg$fail({ type: "end", description: "end of input" });
            }

            throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
        }
    }

    return {
        SyntaxError: SyntaxError,
        parse:       parse
    };
})();